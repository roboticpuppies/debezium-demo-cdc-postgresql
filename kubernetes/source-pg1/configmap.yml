apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-source1-initdb
  namespace: debezium-example
data:
  db.sql: |
    -- Create a users table
    CREATE TABLE users (
        user_id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(150) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create a products table
    CREATE TABLE products (
        product_id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price NUMERIC(10, 2) NOT NULL CHECK (price > 0),
        stock INT NOT NULL DEFAULT 0
    );

    -- Create an orders table without the generated column
    CREATE TABLE orders (
        order_id SERIAL PRIMARY KEY,
        user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
        product_id INT REFERENCES products(product_id) ON DELETE CASCADE,
        quantity INT NOT NULL CHECK (quantity > 0),
        total_price NUMERIC(10, 2) NOT NULL DEFAULT 0, -- Will be updated by trigger
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create a trigger function to update total_price
    CREATE FUNCTION update_total_price() RETURNS TRIGGER AS $$
    BEGIN
        SELECT price INTO NEW.total_price FROM products WHERE product_id = NEW.product_id;
        NEW.total_price := NEW.quantity * COALESCE(NEW.total_price, 0);
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    -- Create a trigger to call the function before insert or update
    CREATE TRIGGER set_total_price
    BEFORE INSERT OR UPDATE ON orders
    FOR EACH ROW EXECUTE FUNCTION update_total_price();

    -- Insert some dummy data
    INSERT INTO users (name, email) VALUES 
    ('Alice', 'alice@example.com'),
    ('Bob', 'bob@example.com');

    INSERT INTO products (name, price, stock) VALUES 
    ('Laptop', 1200.00, 10),
    ('Mouse', 25.50, 50),
    ('Keyboard', 45.00, 30);

    -- Insert orders (trigger will calculate total_price)
    INSERT INTO orders (user_id, product_id, quantity) VALUES 
    (1, 1, 1),
    (2, 2, 2),
    (1, 3, 1);

    -- Check the data
    SELECT * FROM orders;


